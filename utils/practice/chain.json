{
    "definition": "In Langchain, a Chain is a sequence of calls to components. These components can include LLMs, prompts, other Chains, or utilities. Chains are designed to link these components together in a specific order to create a pipeline for processing text or data. They represent a modular and composable way to build more complex applications.",
    "purpose": "Chains serve several key purposes:\n\n*   **Orchestration:** They define the order in which different components are executed.\n*   **Data Passing:** They manage the flow of data (e.g., text, variables) between these components.\n*   **Abstraction:** They encapsulate complex logic, making it easier to reuse and maintain.\n*   **Composability:** They can be nested and combined to create even more sophisticated workflows.\n*   **Flexibility:** They allow for the integration of diverse components, such as LLMs, vector databases, and API calls.",
    "example": "```python\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n\n# Initialize an LLM\nllm = OpenAI(temperature=0.9)\n\n# Define a prompt template\nprompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=\"What is a good name for a company that makes {product}?\"\n)\n\n# Create an LLMChain\nchain = LLMChain(llm=llm, prompt=prompt)\n\n# Run the chain\nprint(chain.run(\"colorful socks\"))\n```"
}